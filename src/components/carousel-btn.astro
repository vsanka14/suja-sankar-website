---
import classnames from "classnames";
export enum CarouselBtnType {
  PREVIOUS = "prev",
  NEXT = "next",
}

interface Props {
  id: string;
  ariaLabel: string;
  disabled?: boolean;
  type: CarouselBtnType;
}

const { id, ariaLabel, disabled, type } = Astro.props;
---

<button
  id={id}
  class={classnames(
    `absolute top-1/2 -translate-y-1/2 z-10 p-2 rounded-full
      bg-white/95 dark:bg-gray-800/95
      border-2 border-gray-200 dark:border-gray-700
      shadow-lg hover:shadow-xl
      transition-all duration-200
      hover:bg-white dark:hover:bg-gray-800
      hover:scale-105
      disabled:opacity-40 disabled:cursor-not-allowed
      disabled:hover:scale-100
      disabled:hover:bg-white/95 dark:disabled:hover:bg-gray-800/95
      disabled:hover:shadow-lg
      sm:opacity-75 sm:group-hover:opacity-100`,
    {
      "left-0 -translate-x-1/2": type === CarouselBtnType.PREVIOUS,
      "right-0 translate-x-1/2": type === CarouselBtnType.NEXT,
    }
  )}
  aria-label={ariaLabel}
  disabled={disabled}
>
  {
    type === CarouselBtnType.PREVIOUS ? (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2.5"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="text-gray-700 dark:text-gray-300"
      >
        <path d="m15 18-6-6 6-6" />
      </svg>
    ) : (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2.5"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="text-gray-700 dark:text-gray-300"
      >
        <path d="m9 18 6-6-6-6" />
      </svg>
    )
  }
</button>
